package bn256

import (
	"testing"

	"bytes"
	"math/rand"
	"strconv"
)

func TestKnownHashes(t *testing.T) {
	for i, mh := range marshaledHashes {
		g := Hash([]byte{byte(i)})
		if !bytes.Equal(mh[:], g.Marshal()) {
			t.Fatal("hash doesn't match a known value")
		}
	}
}

func TestHashCollision(t *testing.T) {
	g := Hash([]byte(strconv.Itoa(rand.Int())))
	h := Hash([]byte(strconv.Itoa(rand.Int())))
	if *(g.p) == *(h.p) {
		t.Fatal("found a collision of hashes ")
	}
}

func TestHashTAICollision(t *testing.T) {
	g := HashTAI([]byte(strconv.Itoa(rand.Int())))
	h := HashTAI([]byte(strconv.Itoa(rand.Int())))
	if *(g.p) == *(h.p) {
		t.Fatal("found a collision of hashes ")
	}
}

func BenchmarkHash(b *testing.B) {
	data := make([][]byte, b.N)
	for i := 0; i < b.N; i++ {
		data[i] = []byte(strconv.Itoa(i))
	}

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		Hash(data[i])
	}
}

func BenchmarkHashTAI(b *testing.B) {
	data := make([][]byte, b.N)
	for i := 0; i < b.N; i++ {
		data[i] = []byte(strconv.Itoa(i))
	}

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		HashTAI(data[i])
	}
}

var marshaledHashes = [10][64]byte{
	[64]byte{28, 47, 112, 151, 172, 170, 228, 103, 46, 217, 54, 107, 197, 64, 125, 121, 115, 80, 121, 45, 45, 195, 172, 182, 5, 18, 206, 56, 179, 138, 94, 214, 35, 72, 119, 57, 31, 121, 61, 52, 15, 2, 76, 61, 135, 104, 206, 64, 235, 231, 117, 50, 122, 234, 161, 169, 97, 0, 240, 112, 34, 166, 15, 48},
	[64]byte{87, 23, 7, 41, 103, 118, 2, 70, 125, 74, 130, 80, 219, 78, 76, 161, 4, 130, 167, 236, 38, 201, 197, 165, 107, 37, 100, 237, 238, 79, 220, 74, 33, 120, 89, 141, 39, 2, 150, 34, 100, 122, 236, 90, 242, 59, 33, 19, 127, 198, 215, 40, 151, 110, 207, 223, 80, 2, 168, 43, 235, 35, 143, 1},
	[64]byte{10, 138, 70, 53, 161, 222, 171, 251, 1, 73, 12, 65, 231, 206, 181, 221, 72, 132, 152, 169, 34, 18, 8, 14, 49, 154, 70, 72, 214, 207, 23, 225, 114, 28, 42, 139, 2, 216, 199, 176, 94, 39, 83, 54, 67, 175, 248, 96, 64, 120, 111, 158, 185, 24, 96, 48, 55, 75, 247, 153, 151, 209, 13, 163},
	[64]byte{129, 206, 57, 11, 6, 104, 78, 151, 174, 52, 176, 80, 21, 107, 121, 58, 54, 115, 24, 68, 52, 148, 50, 96, 250, 113, 61, 127, 26, 121, 80, 72, 87, 129, 75, 5, 177, 189, 232, 143, 211, 184, 238, 139, 135, 173, 254, 33, 203, 9, 245, 142, 39, 203, 148, 142, 166, 118, 231, 137, 72, 51, 145, 230},
	[64]byte{126, 37, 64, 176, 236, 77, 59, 199, 50, 189, 88, 122, 56, 85, 114, 173, 131, 116, 234, 46, 179, 148, 93, 34, 103, 64, 134, 103, 91, 198, 244, 194, 14, 127, 37, 167, 242, 199, 146, 111, 58, 114, 206, 178, 31, 122, 36, 98, 91, 173, 36, 11, 210, 228, 7, 112, 162, 184, 215, 173, 226, 87, 199, 148},
	[64]byte{126, 126, 125, 18, 110, 27, 21, 18, 81, 104, 107, 48, 211, 28, 59, 95, 131, 14, 196, 65, 101, 198, 51, 59, 155, 52, 83, 85, 183, 181, 135, 74, 20, 164, 216, 114, 99, 125, 24, 238, 1, 124, 164, 249, 51, 215, 97, 43, 28, 216, 59, 46, 21, 210, 246, 162, 238, 19, 158, 152, 192, 142, 49, 8},
	[64]byte{125, 85, 222, 121, 162, 102, 99, 225, 190, 179, 193, 153, 198, 206, 41, 230, 176, 96, 188, 232, 51, 184, 65, 137, 97, 251, 219, 6, 182, 78, 128, 190, 71, 230, 35, 211, 68, 169, 122, 76, 40, 169, 14, 210, 237, 226, 60, 41, 107, 133, 38, 81, 22, 61, 76, 249, 199, 78, 150, 127, 147, 211, 199, 7},
	[64]byte{45, 23, 39, 43, 85, 71, 132, 43, 80, 0, 1, 227, 78, 26, 197, 191, 145, 242, 181, 47, 138, 84, 114, 20, 191, 3, 92, 246, 127, 45, 115, 79, 112, 170, 125, 178, 18, 33, 137, 108, 212, 42, 122, 132, 211, 165, 214, 206, 236, 7, 83, 119, 117, 30, 17, 45, 112, 222, 79, 63, 108, 27, 197, 71},
	[64]byte{33, 14, 81, 17, 80, 196, 161, 194, 181, 100, 123, 81, 72, 173, 115, 79, 49, 124, 88, 26, 254, 131, 118, 228, 127, 202, 145, 31, 196, 238, 149, 85, 85, 212, 17, 105, 101, 7, 77, 243, 38, 233, 20, 80, 31, 199, 190, 31, 136, 102, 136, 243, 20, 2, 11, 107, 149, 102, 44, 105, 194, 10, 69, 225},
	[64]byte{104, 221, 55, 152, 146, 25, 47, 175, 69, 205, 167, 70, 100, 223, 224, 20, 6, 198, 4, 9, 135, 13, 138, 161, 24, 102, 24, 22, 13, 124, 45, 17, 122, 241, 237, 11, 184, 134, 129, 236, 44, 108, 142, 63, 22, 132, 25, 79, 186, 34, 6, 30, 216, 215, 224, 133, 170, 76, 246, 137, 207, 201, 141, 27},
}
