package bn256

import (
	"testing"

	"bytes"
)

func TestKnownHashes(t *testing.T) {
	for i, mh := range marshaledHashes {
		g := HashG1([]byte{byte(i)}, nil)
		if !bytes.Equal(mh[:], g.Marshal()) {
			t.Fatal("hash doesn't match a known value")
		}
	}
}

var buf = make([]byte, 8192)

func benchmarkSize(b *testing.B, size int) {
	b.SetBytes(int64(size))
	for i := 0; i < b.N; i++ {
		HashG1(buf[:size], nil)
	}
}

func BenchmarkHashG1Size8bytes(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 8)
}

func BenchmarkHashG1Size1k(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 1024)
}

func BenchmarkHashG1Size8k(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 8192)
}

var marshaledHashes = [10][64]byte{
	[64]byte{108, 22, 118, 25, 38, 53, 44, 202, 179, 207, 182, 8, 247, 79, 205, 130, 140, 95, 195, 25, 185, 103, 107, 67, 0, 109, 172, 224, 150, 213, 61, 5, 52, 8, 148, 141, 135, 244, 141, 54, 118, 31, 34, 196, 53, 186, 52, 41, 71, 161, 57, 70, 108, 128, 111, 135, 153, 124, 187, 119, 108, 121, 7, 50},
	[64]byte{33, 182, 190, 78, 248, 140, 246, 246, 104, 223, 43, 6, 162, 7, 126, 219, 80, 236, 78, 163, 145, 232, 46, 182, 130, 60, 150, 121, 82, 189, 208, 141, 12, 110, 226, 158, 108, 187, 8, 75, 92, 64, 235, 188, 121, 170, 106, 230, 206, 215, 204, 81, 77, 182, 149, 215, 195, 126, 177, 165, 114, 81, 96, 173},
	[64]byte{33, 109, 32, 174, 38, 174, 55, 102, 94, 226, 223, 207, 127, 254, 175, 156, 4, 209, 217, 218, 152, 119, 193, 22, 131, 181, 140, 49, 154, 224, 178, 152, 52, 194, 166, 142, 226, 37, 180, 240, 93, 122, 214, 242, 221, 73, 82, 152, 122, 239, 206, 86, 24, 50, 94, 168, 202, 18, 168, 201, 234, 116, 236, 90},
	[64]byte{13, 175, 135, 9, 136, 177, 13, 83, 133, 4, 176, 252, 132, 186, 195, 52, 176, 234, 90, 231, 182, 90, 127, 182, 166, 189, 39, 77, 49, 14, 244, 101, 109, 47, 29, 49, 240, 202, 211, 162, 144, 46, 27, 67, 204, 208, 203, 221, 230, 79, 196, 189, 7, 31, 147, 222, 128, 250, 105, 138, 116, 87, 190, 22},
	[64]byte{82, 179, 3, 94, 48, 129, 102, 60, 150, 207, 175, 15, 236, 164, 0, 55, 66, 42, 192, 67, 144, 243, 192, 178, 16, 192, 10, 195, 35, 125, 118, 195, 31, 205, 252, 179, 100, 189, 125, 155, 19, 57, 1, 24, 213, 120, 38, 58, 119, 189, 5, 139, 192, 40, 155, 99, 111, 132, 105, 222, 243, 250, 83, 180},
	[64]byte{98, 81, 92, 208, 234, 212, 118, 53, 2, 230, 20, 207, 195, 24, 217, 111, 35, 98, 27, 118, 80, 82, 48, 9, 146, 29, 180, 204, 35, 139, 175, 14, 23, 83, 20, 218, 2, 137, 198, 227, 16, 213, 205, 33, 255, 30, 80, 197, 132, 255, 208, 91, 224, 164, 232, 129, 19, 67, 33, 85, 98, 36, 172, 74},
	[64]byte{37, 160, 170, 185, 26, 183, 90, 49, 119, 61, 255, 244, 100, 55, 155, 248, 63, 236, 221, 247, 103, 50, 79, 203, 191, 80, 113, 35, 141, 148, 187, 109, 8, 47, 129, 103, 68, 248, 216, 159, 146, 237, 198, 126, 77, 199, 114, 20, 38, 161, 93, 15, 181, 145, 177, 101, 221, 121, 100, 132, 95, 104, 179, 247},
	[64]byte{137, 72, 106, 12, 69, 197, 19, 251, 225, 224, 87, 187, 236, 235, 14, 67, 234, 234, 238, 101, 177, 198, 119, 198, 171, 3, 224, 91, 161, 114, 207, 172, 119, 58, 242, 217, 172, 252, 193, 246, 173, 156, 81, 101, 115, 245, 96, 248, 56, 72, 5, 245, 112, 72, 216, 94, 122, 111, 232, 17, 77, 168, 160, 113},
	[64]byte{32, 123, 178, 14, 107, 84, 164, 63, 27, 223, 67, 68, 234, 17, 135, 127, 114, 226, 51, 165, 25, 50, 215, 22, 75, 211, 52, 217, 129, 89, 167, 62, 13, 220, 72, 86, 64, 171, 62, 226, 128, 238, 233, 152, 24, 99, 51, 122, 253, 22, 194, 123, 253, 141, 25, 165, 184, 124, 2, 232, 37, 199, 78, 198},
	[64]byte{92, 32, 247, 42, 73, 106, 95, 107, 202, 92, 15, 240, 129, 251, 2, 202, 38, 87, 15, 68, 206, 136, 138, 241, 57, 172, 0, 31, 148, 234, 190, 38, 99, 31, 41, 56, 183, 220, 210, 194, 62, 159, 158, 36, 24, 214, 0, 142, 7, 218, 200, 120, 51, 178, 254, 16, 124, 22, 162, 182, 41, 16, 127, 124},
}
