package bn256

import (
	"testing"

	"bytes"
)

func TestKnownHashes(t *testing.T) {
	for i, mh := range marshaledHashes {
		g := HashG1([]byte{byte(i)})
		if !bytes.Equal(mh[:], g.Marshal()) {
			t.Fatal("hash doesn't match a known value")
		}
	}
}

var buf = make([]byte, 8192)

func benchmarkSize(b *testing.B, size int) {
	b.SetBytes(int64(size))
	for i := 0; i < b.N; i++ {
		HashG1(buf[:size])
	}
}

func BenchmarkHashG1Size8bytes(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 8)
}

func BenchmarkHashG1Size1k(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 1024)
}

func BenchmarkHashG1Size8k(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 8192)
}

var marshaledHashes = [10][64]byte{
	[64]byte{28, 47, 112, 151, 172, 170, 228, 103, 46, 217, 54, 107, 197, 64, 125, 121, 115, 80, 121, 45, 45, 195, 172, 182, 5, 18, 206, 56, 179, 138, 94, 214, 108, 108, 138, 170, 43, 42, 74, 197, 155, 109, 160, 122, 218, 28, 13, 225, 2, 116, 19, 158, 165, 203, 19, 244, 183, 91, 187, 252, 59, 98, 135, 55},
	[64]byte{87, 23, 7, 41, 103, 118, 2, 70, 125, 74, 130, 80, 219, 78, 76, 161, 4, 130, 167, 236, 38, 201, 197, 165, 107, 37, 100, 237, 238, 79, 220, 74, 33, 120, 89, 141, 39, 2, 150, 34, 100, 122, 236, 90, 242, 59, 33, 19, 127, 198, 215, 40, 151, 110, 207, 223, 80, 2, 168, 43, 235, 35, 143, 1},
	[64]byte{10, 138, 70, 53, 161, 222, 171, 251, 1, 73, 12, 65, 231, 206, 181, 221, 72, 132, 152, 169, 34, 18, 8, 14, 49, 154, 70, 72, 214, 207, 23, 225, 29, 152, 215, 88, 71, 202, 192, 73, 76, 72, 153, 130, 29, 212, 227, 193, 173, 227, 25, 50, 103, 157, 85, 109, 225, 16, 180, 210, 198, 55, 136, 196},
	[64]byte{129, 206, 57, 11, 6, 104, 78, 151, 174, 52, 176, 80, 21, 107, 121, 58, 54, 115, 24, 68, 52, 148, 50, 96, 250, 113, 61, 127, 26, 121, 80, 72, 87, 129, 75, 5, 177, 189, 232, 143, 211, 184, 238, 139, 135, 173, 254, 33, 203, 9, 245, 142, 39, 203, 148, 142, 166, 118, 231, 137, 72, 51, 145, 230},
	[64]byte{126, 37, 64, 176, 236, 77, 59, 199, 50, 189, 88, 122, 56, 85, 114, 173, 131, 116, 234, 46, 179, 148, 93, 34, 103, 64, 134, 103, 91, 198, 244, 194, 129, 53, 220, 59, 87, 219, 245, 138, 111, 253, 30, 6, 66, 10, 183, 191, 146, 174, 100, 197, 77, 209, 174, 45, 117, 163, 212, 190, 123, 176, 206, 211},
	[64]byte{126, 126, 125, 18, 110, 27, 21, 18, 81, 104, 107, 48, 211, 28, 59, 95, 131, 14, 196, 65, 101, 198, 51, 59, 155, 52, 83, 85, 183, 181, 135, 74, 20, 164, 216, 114, 99, 125, 24, 238, 1, 124, 164, 249, 51, 215, 97, 43, 28, 216, 59, 46, 21, 210, 246, 162, 238, 19, 158, 152, 192, 142, 49, 8},
	[64]byte{125, 85, 222, 121, 162, 102, 99, 225, 190, 179, 193, 153, 198, 206, 41, 230, 176, 96, 188, 232, 51, 184, 65, 137, 97, 251, 219, 6, 182, 78, 128, 190, 71, 206, 222, 16, 5, 250, 13, 173, 129, 198, 221, 229, 115, 162, 159, 248, 130, 214, 98, 128, 10, 120, 104, 164, 81, 14, 21, 236, 202, 52, 207, 96},
	[64]byte{142, 238, 15, 60, 74, 82, 202, 209, 224, 149, 228, 154, 36, 26, 116, 255, 78, 41, 118, 39, 122, 5, 67, 217, 128, 57, 231, 58, 41, 182, 159, 130, 46, 68, 210, 54, 181, 57, 233, 219, 45, 136, 122, 188, 116, 235, 160, 26, 145, 117, 142, 161, 4, 148, 170, 8, 138, 95, 53, 124, 68, 4, 139, 162},
	[64]byte{46, 8, 250, 30, 56, 195, 107, 185, 175, 23, 41, 28, 128, 130, 158, 123, 216, 173, 188, 56, 39, 191, 133, 247, 95, 56, 35, 156, 192, 231, 231, 116, 6, 30, 26, 249, 15, 37, 133, 45, 83, 100, 213, 160, 107, 83, 194, 14, 62, 21, 201, 105, 47, 240, 197, 64, 133, 120, 180, 147, 64, 75, 253, 57},
	[64]byte{104, 221, 55, 152, 146, 25, 47, 175, 69, 205, 167, 70, 100, 223, 224, 20, 6, 198, 4, 9, 135, 13, 138, 161, 24, 102, 24, 22, 13, 124, 45, 17, 20, 195, 20, 215, 146, 29, 6, 13, 126, 3, 94, 121, 75, 0, 194, 210, 52, 57, 130, 178, 71, 221, 213, 24, 110, 15, 181, 226, 142, 63, 9, 76},
}
