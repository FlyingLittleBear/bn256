package bn256

import (
	"testing"

	"bytes"
)

func TestKnownHashes(t *testing.T) {
	for i, mh := range marshaledHashes {
		g := HashG1([]byte{byte(i)})
		if !bytes.Equal(mh[:], g.Marshal()) {
			t.Fatal("hash doesn't match a known value")
		}
	}
}

var buf = make([]byte, 8192)

func benchmarkSize(b *testing.B, size int) {
	b.SetBytes(int64(size))
	for i := 0; i < b.N; i++ {
		HashG1(buf[:size])
	}
}

func BenchmarkHashG1Size8bytes(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 8)
}

func BenchmarkHashG1Size1k(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 1024)
}

func BenchmarkHashG1Size8k(b *testing.B) {
	b.ResetTimer()
	benchmarkSize(b, 8192)
}

var marshaledHashes = [10][64]byte{
	[64]byte{135, 177, 225, 160, 120, 86, 92, 89, 109, 188, 241, 235, 67, 86, 168, 121, 191, 45, 84, 167, 189, 30, 114, 2, 180, 104, 62, 35, 127, 79, 183, 87, 87, 225, 246, 28, 156, 73, 115, 36, 249, 149, 138, 153, 100, 80, 144, 99, 24, 113, 245, 137, 21, 159, 41, 172, 41, 188, 8, 108, 76, 187, 0, 238},
	[64]byte{71, 195, 48, 22, 95, 178, 79, 32, 64, 0, 207, 100, 163, 88, 78, 12, 97, 101, 233, 205, 185, 225, 126, 74, 5, 92, 255, 162, 245, 189, 45, 32, 23, 44, 70, 218, 150, 127, 251, 237, 153, 74, 11, 33, 143, 228, 18, 133, 102, 238, 124, 74, 231, 156, 147, 247, 217, 15, 99, 159, 105, 188, 16, 165},
	[64]byte{93, 162, 22, 241, 50, 52, 239, 16, 204, 155, 16, 211, 87, 166, 255, 200, 92, 138, 221, 35, 13, 230, 203, 135, 113, 158, 102, 102, 99, 149, 132, 186, 1, 60, 176, 5, 13, 173, 117, 24, 141, 150, 158, 94, 145, 58, 186, 56, 241, 163, 227, 157, 82, 250, 34, 54, 202, 176, 158, 143, 234, 110, 79, 126},
	[64]byte{44, 52, 27, 83, 122, 31, 3, 242, 171, 73, 244, 109, 250, 173, 253, 81, 125, 57, 233, 220, 81, 76, 1, 15, 191, 155, 81, 143, 148, 30, 153, 133, 94, 99, 53, 12, 42, 164, 220, 168, 143, 129, 203, 151, 52, 176, 27, 13, 111, 72, 167, 63, 254, 90, 184, 227, 81, 192, 1, 33, 190, 23, 141, 236},
	[64]byte{31, 216, 167, 67, 192, 14, 173, 132, 131, 164, 142, 69, 29, 239, 134, 136, 253, 153, 140, 223, 91, 53, 214, 163, 47, 118, 74, 164, 108, 252, 196, 163, 129, 247, 129, 67, 211, 155, 27, 127, 54, 241, 37, 249, 122, 206, 91, 193, 129, 145, 35, 10, 82, 198, 11, 98, 100, 228, 58, 22, 146, 78, 165, 242},
	[64]byte{63, 185, 68, 132, 98, 111, 7, 13, 104, 104, 57, 59, 120, 214, 209, 35, 44, 56, 228, 169, 82, 244, 112, 255, 42, 252, 49, 135, 248, 184, 246, 41, 20, 180, 57, 244, 229, 140, 220, 26, 98, 41, 171, 201, 169, 197, 241, 235, 207, 11, 212, 55, 51, 195, 56, 94, 163, 177, 194, 118, 168, 31, 100, 207},
	[64]byte{19, 33, 111, 234, 30, 200, 24, 138, 215, 113, 252, 209, 106, 130, 107, 237, 165, 179, 97, 36, 162, 69, 157, 96, 33, 222, 70, 31, 80, 40, 204, 21, 118, 34, 244, 2, 242, 216, 13, 183, 10, 86, 133, 66, 115, 170, 80, 62, 17, 237, 245, 190, 113, 13, 152, 8, 203, 22, 36, 186, 112, 146, 61, 251},
	[64]byte{19, 78, 81, 159, 78, 217, 51, 154, 207, 239, 29, 97, 157, 43, 36, 255, 27, 122, 76, 34, 187, 87, 45, 45, 40, 27, 47, 130, 91, 0, 247, 210, 27, 27, 4, 168, 160, 6, 208, 39, 19, 116, 121, 109, 137, 185, 194, 40, 148, 244, 37, 229, 62, 39, 244, 124, 209, 142, 36, 148, 115, 248, 252, 83},
	[64]byte{91, 186, 184, 64, 86, 4, 86, 168, 69, 187, 226, 216, 27, 249, 170, 207, 157, 90, 8, 93, 255, 224, 152, 190, 219, 141, 56, 133, 185, 82, 232, 247, 9, 169, 203, 29, 106, 205, 225, 143, 25, 93, 127, 1, 176, 131, 4, 51, 213, 130, 254, 1, 191, 107, 0, 81, 166, 4, 115, 2, 167, 112, 37, 159},
	[64]byte{66, 227, 254, 179, 25, 34, 108, 91, 139, 31, 235, 250, 156, 149, 120, 202, 140, 173, 2, 187, 247, 155, 155, 237, 108, 155, 125, 211, 5, 13, 53, 98, 104, 178, 123, 63, 148, 58, 39, 87, 147, 106, 184, 169, 226, 222, 190, 193, 85, 149, 225, 54, 241, 140, 110, 52, 19, 227, 201, 75, 122, 4, 239, 253},
}
